// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Post          Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// The Blog Model.
model Post {
    id         String     @id @default(cuid())
    title      String
    Content    String     @db.Text
    published  Boolean    @default(false)
    author     User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId   String
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt
    categories Category[]
    comments   Comment[]

    @@index([authorId])
}

model Category {
    id    String @id @default(cuid())
    name  String
    posts Post[]
}

model Comment {
    id        String   @id @default(cuid())
    comment   String   @db.Text
    post      Post     @relation(fields: [postId], references: [id])
    postId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([postId])
}
